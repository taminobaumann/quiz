import React, {useState, useEffect} from 'react';
import Head from 'next/head'
import styles from '../styles/Home.module.css'
//Components
import QuestionCard from "../components/questionCard";
//util
import { Difficulty, getQuizCategories, getQuizQuestions, QuestionState} from '../lib/api';
import QuizStartScreen from "../components/quizStartScreen";
import QuizEndScreen from "../components/quizEndScreen";
import Score from "../components/score";
import {CategoryForSelect, getRandomInt, transformQuizCategoriesForSelect} from "../lib/utils";

export type AnswerObject = {
    question: string;
    answer: string;
    correct: boolean;
    correctAnswer: string;
}

const TOTAL_QUESTIONS = 10;

export default function Home() {
    const [difficultyLevel, setDifficultyLevel] = useState<Difficulty>(Difficulty.EASY);
    const [categoriesForSelect, setCategoriesForSelect] = useState<CategoryForSelect[]>([]);
    const [selectedCategory, setSelectedCategory] = useState<CategoryForSelect | null>(null);
    const [loading, setLoading] = useState(false);
    const [questions, setQuestions] = useState<QuestionState[]>([]);
    const [answers, setAnswers] = useState<AnswerObject[]>([]);
    const [number, setNumber] = useState(0);
    const [score, setScore] = useState(0);
    const [gameOver, setGameOver] = useState(true);

    const startQuizHandler = async () => {
        setLoading(true);
        setGameOver(false);

        const newQuestions = await getQuizQuestions(TOTAL_QUESTIONS, difficultyLevel, selectedCategory ?  selectedCategory.value : 1);

        setQuestions(newQuestions);
        setScore(0);
        setAnswers([]);
        setNumber(0);
        setLoading(false);
    };

    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {
        if (gameOver) return;

        const currentQuestion = questions[number];
        const answer = e.currentTarget.value;
        const correct = currentQuestion.correct_answer === answer;
        if (correct) {
            setScore(prevState => prevState + 1);
        }
        const answerObj = {
            question: currentQuestion.question,
            answer,
            correct,
            correctAnswer: currentQuestion.correct_answer
        };
        const updatedAnswers = [...answers, answerObj];

        if (updatedAnswers.length === TOTAL_QUESTIONS) {
            setGameOver(true);
        }

        setAnswers(updatedAnswers);
    };

    const nextQuestionHandler = () => {
        if (number !== answers.length - 1) return;

        setNumber(prev => prev + 1);
    };

    const newGameHandler = () => {
        setGameOver(false);
    };

    const difficultyChangeHandler = (difficulty: Difficulty) => {
        setDifficultyLevel(difficulty);
    };

    let mainContent = <QuizStartScreen loading={loading} startQuizHandler={startQuizHandler}
                                       difficultyLevel={difficultyLevel}
                                       difficultyChangeHandler={difficultyChangeHandler}
                                       categories={categoriesForSelect}
                                       selectedCategory={selectedCategory}
                                       categoryChangeHandler={setSelectedCategory}/>;

    if (!gameOver && questions.length > 0 && answers.length !== TOTAL_QUESTIONS) {
        mainContent = (<React.Fragment>
            <Score score={score}/>
            <QuestionCard
                questionNr={number + 1}
                totalQuestions={TOTAL_QUESTIONS}
                question={questions[number].question}
                answers={questions[number].answers}
                userAnswer={answers ? answers[number] : null}
                callback={checkAnswer}
            />
            {(answers.length < TOTAL_QUESTIONS && answers.length !== 0) && answers.length === number + 1 &&
            <button className="btn--primary" style={{marginTop: "1rem"}} onClick={nextQuestionHandler}>Next
              Question</button>}
        </React.Fragment>)
    }

    if (gameOver && answers.length === TOTAL_QUESTIONS) {
        mainContent = <QuizEndScreen score={score} numOfQuestions={questions.length} newGameHandler={newGameHandler}/>
    }

    useEffect(() => {
        setSelectedCategory({value: 0, label: "Loading..."});
        getQuizCategories()
            .then(categories => {
                const categoriesForSelect = transformQuizCategoriesForSelect(categories);
                const randomNumber = getRandomInt(0, categoriesForSelect.length - 1);
                setSelectedCategory(categoriesForSelect[randomNumber]);
                setCategoriesForSelect(categoriesForSelect)
            })
            .catch(e => {
                console.log(e);
                 setSelectedCategory({value: 0, label: "Not categories found"});
            })
    }, []);

    return (
        <>
            <Head>
                <title>Quiz</title>
                <meta name="description" content="Generated by create next app"/>
            </Head>

            <main>
                <div style={{backgroundImage: "url(images/background.jpg)"}} className={styles.backgroundImage}>
                    <h1 className={styles.title}>Quiz</h1>
                    <div className={styles.quizContainer}>
                        {mainContent}
                    </div>
                </div>
            </main>
        </>
    )
}
